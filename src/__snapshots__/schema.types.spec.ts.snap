// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema.types enumType returns GraphQLEnumType 1`] = `
""""
Enum title
Enum description
"""
enum TestEnum {
  O_N_E
  TWO
}"
`;

exports[`schema.types generateProfileConfig creates config with description and resolve function 1`] = `
{
  "description": "Full profile
Full profile to test all generation functionality",
  "resolve": [Function],
  "type": "Test",
}
`;

exports[`schema.types generateProfileProviderOptionInputType creates provider object with security and parameters field 1`] = `
""""Provider configuration for OneSDK perform"""
input TestProviderInput {
  """Provider mock configuration"""
  mock: MockProviderConfig

  """Provider superface configuration"""
  superface: SuperfaceProviderConfig

  """Provider gql_bad-name configuration"""
  gql_bad__name: GqlBadNameProviderConfig
}

input MockProviderConfig {
  active: Boolean
}

input SuperfaceProviderConfig {
  active: Boolean
  parameters: SuperfaceProviderParameters
  security: SuperfaceProviderSecurity
}

"""Provider-specific parameters"""
input SuperfaceProviderParameters {
  """Parameter accepted by superface"""
  accessToken: String
}

"""Provider-specific security"""
input SuperfaceProviderSecurity {
  """Security accepted by superface"""
  api_key: SuperfaceApiKeySecurityValues

  """Security accepted by superface"""
  basic: SuperfaceBasicSecurityValues

  """Security accepted by superface"""
  bearer_token: SuperfaceBearerTokenSecurityValues

  """Security accepted by superface"""
  digest: SuperfaceDigestSecurityValues
}

input SuperfaceApiKeySecurityValues {
  apikey: String
}

input SuperfaceBasicSecurityValues {
  username: String
  password: String
}

input SuperfaceBearerTokenSecurityValues {
  token: String
}

input SuperfaceDigestSecurityValues {
  username: String
  password: String
}

input GqlBadNameProviderConfig {
  active: Boolean
}"
`;

exports[`schema.types generateRootType create Query type with profiles 1`] = `
"type Query {
  ProfileOne: ProfileOne
  Scope: Scope
}

type ProfileOne {
  field: String
}

type Scope {
  ProfileTwo: ScopeProfileTwo
}

type ScopeProfileTwo {
  UseCase: String
}"
`;

exports[`schema.types generateStructureResultType creates ScopeNameResult as None value 1`] = `
""""
Wrapping type to handle many possible types returned as result by OneSDK
"""
type ScopeNameResult {
  result: Empty
}

"""Represents empty object"""
type Empty {
  _: None
}

"""Represents NULL value"""
scalar None"
`;

exports[`schema.types generateStructureResultType creates ScopeNameResult as None value if result is empty object 1`] = `
""""
Wrapping type to handle many possible types returned as result by OneSDK
"""
type ScopeNameResult {
  result: Empty
}

"""Represents empty object"""
type Empty {
  _: None
}

"""Represents NULL value"""
scalar None"
`;

exports[`schema.types generateStructureResultType creates ScopeNameResult if result contains nested empty object 1`] = `
""""
Wrapping type to handle many possible types returned as result by OneSDK
"""
type ScopeNameResult {
  result: ScopeNameResultNode
}

type ScopeNameResultNode {
  foo: Empty
}

"""Represents empty object"""
type Empty {
  _: None
}

"""Represents NULL value"""
scalar None"
`;

exports[`schema.types generateStructureResultType creates ScopeNameResult with description and result field 1`] = `
""""
Wrapping type to handle many possible types returned as result by OneSDK
"""
type ScopeNameResult {
  result: ScopeNameResultNode
}

type ScopeNameResultNode {
  """
  Result Field title
  Result Field description
  """
  field: String!

  """
  Named Field title
  Named Field description
  """
  namedField: String!
}"
`;

exports[`schema.types generateUseCaseFieldConfig usecase with empty input creates arguments without input 1`] = `
{
  "args": {
    "provider": {
      "type": "ScopeNameProviderOption",
    },
  },
  "description": undefined,
  "resolve": [Function],
  "type": "ScopeNameUseCaseResult",
}
`;

exports[`schema.types generateUseCaseFieldConfig valid profile creates field config with arguments, resolver and description 1`] = `
{
  "args": {
    "input": {
      "description": "Use-case inputs",
      "type": "ScopeNameUseCaseInput",
    },
    "provider": {
      "type": "ScopeNameProviderOption",
    },
  },
  "description": "UseCase
UseCase description",
  "resolve": [Function],
  "type": "ScopeNameUseCaseResult",
}
`;

exports[`schema.types generateUseCaseProviderParametersFields generates provider parameters for configured providers 1`] = `
{
  "accessToken": {
    "description": "Parameter accepted by superface",
    "type": "String",
  },
}
`;

exports[`schema.types generateUseCaseSecurityFields generates security fields for configured providers 1`] = `
{
  "api_key": {
    "description": "Security accepted by superface",
    "type": "SuperfaceApiKeySecurityValues",
  },
  "basic": {
    "description": "Security accepted by superface",
    "type": "SuperfaceBasicSecurityValues",
  },
  "bearer_token": {
    "description": "Security accepted by superface",
    "type": "SuperfaceBearerTokenSecurityValues",
  },
  "digest": {
    "description": "Security accepted by superface",
    "type": "SuperfaceDigestSecurityValues",
  },
}
`;

exports[`schema.types inputType returns GraphQLInputType 1`] = `
"type MyObjectType {
  """
  Primitive
  String
  """
  primitive_string: String

  """
  Primitive
  Number
  """
  primitive_number: Float

  """
  Primitive
  boolean
  """
  primitive_boolean: Boolean

  """
  Object
  Nested
  """
  nested_object: MyObjectTypeNestedObject
  list: [String!]

  """
  Enum title
  Enum description
  """
  enum: MyObjectTypeEnum
}

type MyObjectTypeNestedObject {
  """
  Nested field title
  Nested field description
  """
  field: String
}

"""
Enum title
Enum description
"""
enum MyObjectTypeEnum {
  ONE
  TWO
}"
`;

exports[`schema.types outputType returns GraphQLObjectType 1`] = `
"type MyObjectType {
  """
  Primitive
  String
  """
  primitive_string: String

  """
  Primitive
  Number
  """
  primitive_number: Float

  """
  Primitive
  boolean
  """
  primitive_boolean: Boolean

  """
  Object
  Nested
  """
  nested_object: MyObjectTypeNestedObject
  list: [String!]

  """
  Enum title
  Enum description
  """
  enum: MyObjectTypeEnum
}

type MyObjectTypeNestedObject {
  """
  Nested field title
  Nested field description
  """
  field: String
}

"""
Enum title
Enum description
"""
enum MyObjectTypeEnum {
  ONE
  TWO
}"
`;

exports[`schema.types prepareProviderConfigTypeMap creates map of provider config types 1`] = `
{
  "gql_bad-name": {
    "description": "Provider gql_bad-name configuration",
    "type": "GqlBadNameProviderConfig",
  },
  "mock": {
    "description": "Provider mock configuration",
    "type": "MockProviderConfig",
  },
  "superface": {
    "description": "Provider superface configuration",
    "type": "SuperfaceProviderConfig",
  },
}
`;

exports[`schema.types scalarType returns GraphQLScalarType 1`] = `
""""
Scalar title
Scalar description
"""
scalar TestScalar"
`;
