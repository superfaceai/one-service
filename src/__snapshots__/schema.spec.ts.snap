// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema generate generates valid schema for profile with mutiple usecases 1`] = `[]`;

exports[`schema generate generates valid schema for profile with mutiple usecases 2`] = `
""""Superface.ai ❤️"""
schema {
  query: Query
}

"""Profile's safe use-cases"""
type Query {
  Profile: ProfileQuery
  _superJson: SuperJson
}

type ProfileQuery {
  UseCaseOne(provider: ProfileProviderInput): ProfileUseCaseOneResult
  UseCaseTwo(provider: ProfileProviderInput): ProfileUseCaseTwoResult
}

"""
Wrapping type to handle many possible types returned as result by OneSDK
"""
type ProfileUseCaseOneResult {
  result: String
}

"""Provider configuration for OneSDK perform"""
input ProfileProviderInput {
  """Provider test configuration"""
  test: TestProviderConfig
}

input TestProviderConfig {
  active: Boolean
  parameters: TestProviderParameters
  security: TestProviderSecurity
}

"""Provider-specific parameters"""
input TestProviderParameters {
  """Parameter accepted by test"""
  param_no_default: String

  """Parameter accepted by test"""
  param_default: String
}

"""Provider-specific security"""
input TestProviderSecurity {
  """Security accepted by test"""
  api__key: TestApiKeySecurityValues

  """Security accepted by test"""
  basic: TestBasicSecurityValues

  """Security accepted by test"""
  bearer_token: TestBearerTokenSecurityValues

  """Security accepted by test"""
  digest: TestDigestSecurityValues
}

input TestApiKeySecurityValues {
  apikey: String
}

input TestBasicSecurityValues {
  username: String
  password: String
}

input TestBearerTokenSecurityValues {
  token: String
}

input TestDigestSecurityValues {
  username: String
  password: String
}

"""
Wrapping type to handle many possible types returned as result by OneSDK
"""
type ProfileUseCaseTwoResult {
  result: String
}

type SuperJson {
  profiles: [ProfileInfo]
  providers: [String]
}

type ProfileInfo {
  name: String
  version: String
  providers: [String]
}"
`;

exports[`schema generate generates valid schema for profile without scope 1`] = `[]`;

exports[`schema generate generates valid schema for profile without scope 2`] = `
""""Superface.ai ❤️"""
schema {
  query: Query
}

"""Profile's safe use-cases"""
type Query {
  Profile: ProfileQuery
  _superJson: SuperJson
}

type ProfileQuery {
  UseCase(provider: ProfileProviderInput): ProfileUseCaseResult
}

"""
Wrapping type to handle many possible types returned as result by OneSDK
"""
type ProfileUseCaseResult {
  result: String
}

"""Provider configuration for OneSDK perform"""
input ProfileProviderInput {
  """Provider test configuration"""
  test: TestProviderConfig
}

input TestProviderConfig {
  active: Boolean
  parameters: TestProviderParameters
  security: TestProviderSecurity
}

"""Provider-specific parameters"""
input TestProviderParameters {
  """Parameter accepted by test"""
  param_no_default: String

  """Parameter accepted by test"""
  param_default: String
}

"""Provider-specific security"""
input TestProviderSecurity {
  """Security accepted by test"""
  api__key: TestApiKeySecurityValues

  """Security accepted by test"""
  basic: TestBasicSecurityValues

  """Security accepted by test"""
  bearer_token: TestBearerTokenSecurityValues

  """Security accepted by test"""
  digest: TestDigestSecurityValues
}

input TestApiKeySecurityValues {
  apikey: String
}

input TestBasicSecurityValues {
  username: String
  password: String
}

input TestBearerTokenSecurityValues {
  token: String
}

input TestDigestSecurityValues {
  username: String
  password: String
}

type SuperJson {
  profiles: [ProfileInfo]
  providers: [String]
}

type ProfileInfo {
  name: String
  version: String
  providers: [String]
}"
`;

exports[`schema generate generates valid schema for two profiles with same provider 1`] = `[]`;

exports[`schema generate generates valid schema for two profiles with same provider 2`] = `
""""Superface.ai ❤️"""
schema {
  query: Query
  mutation: Mutation
}

"""Profile's safe use-cases"""
type Query {
  _superJson: SuperJson
}

type SuperJson {
  profiles: [ProfileInfo]
  providers: [String]
}

type ProfileInfo {
  name: String
  version: String
  providers: [String]
}

"""Profile's unsafe and idempotent use-cases"""
type Mutation {
  ScopeName: ScopeNameMutation
}

type ScopeNameMutation {
  UnsafeUsecase(provider: ScopeNameProviderInput): ScopeNameUnsafeUsecaseResult
}

"""
Wrapping type to handle many possible types returned as result by OneSDK
"""
type ScopeNameUnsafeUsecaseResult {
  result: Int
}

"""Provider configuration for OneSDK perform"""
input ScopeNameProviderInput {
  """Provider test configuration"""
  test: TestProviderConfig
}

input TestProviderConfig {
  active: Boolean
  parameters: TestProviderParameters
  security: TestProviderSecurity
}

"""Provider-specific parameters"""
input TestProviderParameters {
  """Parameter accepted by test"""
  param_no_default: String

  """Parameter accepted by test"""
  param_default: String
}

"""Provider-specific security"""
input TestProviderSecurity {
  """Security accepted by test"""
  api__key: TestApiKeySecurityValues

  """Security accepted by test"""
  basic: TestBasicSecurityValues

  """Security accepted by test"""
  bearer_token: TestBearerTokenSecurityValues

  """Security accepted by test"""
  digest: TestDigestSecurityValues
}

input TestApiKeySecurityValues {
  apikey: String
}

input TestBasicSecurityValues {
  username: String
  password: String
}

input TestBearerTokenSecurityValues {
  token: String
}

input TestDigestSecurityValues {
  username: String
  password: String
}"
`;

exports[`schema generate generates valid schema for usecase with empty input 1`] = `[]`;

exports[`schema generate generates valid schema for usecase with empty input 2`] = `
""""Superface.ai ❤️"""
schema {
  query: Query
  mutation: Mutation
}

"""Profile's safe use-cases"""
type Query {
  _superJson: SuperJson
}

type SuperJson {
  profiles: [ProfileInfo]
  providers: [String]
}

type ProfileInfo {
  name: String
  version: String
  providers: [String]
}

"""Profile's unsafe and idempotent use-cases"""
type Mutation {
  ScopeName: ScopeNameMutation
}

type ScopeNameMutation {
  UseCase(provider: ScopeNameProviderInput): ScopeNameUseCaseResult
}

"""
Wrapping type to handle many possible types returned as result by OneSDK
"""
type ScopeNameUseCaseResult {
  result: String
}

"""Provider configuration for OneSDK perform"""
input ScopeNameProviderInput {
  """Provider test configuration"""
  test: TestProviderConfig
}

input TestProviderConfig {
  active: Boolean
  parameters: TestProviderParameters
  security: TestProviderSecurity
}

"""Provider-specific parameters"""
input TestProviderParameters {
  """Parameter accepted by test"""
  param_no_default: String

  """Parameter accepted by test"""
  param_default: String
}

"""Provider-specific security"""
input TestProviderSecurity {
  """Security accepted by test"""
  api__key: TestApiKeySecurityValues

  """Security accepted by test"""
  basic: TestBasicSecurityValues

  """Security accepted by test"""
  bearer_token: TestBearerTokenSecurityValues

  """Security accepted by test"""
  digest: TestDigestSecurityValues
}

input TestApiKeySecurityValues {
  apikey: String
}

input TestBasicSecurityValues {
  username: String
  password: String
}

input TestBearerTokenSecurityValues {
  token: String
}

input TestDigestSecurityValues {
  username: String
  password: String
}"
`;

exports[`schema generate generates valid schema for usecase without result 1`] = `[]`;

exports[`schema generate generates valid schema for usecase without result 2`] = `
""""Superface.ai ❤️"""
schema {
  query: Query
  mutation: Mutation
}

"""Profile's safe use-cases"""
type Query {
  _superJson: SuperJson
}

type SuperJson {
  profiles: [ProfileInfo]
  providers: [String]
}

type ProfileInfo {
  name: String
  version: String
  providers: [String]
}

"""Profile's unsafe and idempotent use-cases"""
type Mutation {
  ScopeName: ScopeNameMutation
}

type ScopeNameMutation {
  NoResult(provider: ScopeNameProviderInput): ScopeNameNoResultResult
}

"""
Wrapping type to handle many possible types returned as result by OneSDK
"""
type ScopeNameNoResultResult {
  result: None
}

"""Represents NULL value"""
scalar None

"""Provider configuration for OneSDK perform"""
input ScopeNameProviderInput {
  """Provider test configuration"""
  test: TestProviderConfig
}

input TestProviderConfig {
  active: Boolean
  parameters: TestProviderParameters
  security: TestProviderSecurity
}

"""Provider-specific parameters"""
input TestProviderParameters {
  """Parameter accepted by test"""
  param_no_default: String

  """Parameter accepted by test"""
  param_default: String
}

"""Provider-specific security"""
input TestProviderSecurity {
  """Security accepted by test"""
  api__key: TestApiKeySecurityValues

  """Security accepted by test"""
  basic: TestBasicSecurityValues

  """Security accepted by test"""
  bearer_token: TestBearerTokenSecurityValues

  """Security accepted by test"""
  digest: TestDigestSecurityValues
}

input TestApiKeySecurityValues {
  apikey: String
}

input TestBasicSecurityValues {
  username: String
  password: String
}

input TestBearerTokenSecurityValues {
  token: String
}

input TestDigestSecurityValues {
  username: String
  password: String
}"
`;

exports[`schema generate generates valid schema for usecases mapped to mutation only 1`] = `[]`;

exports[`schema generate generates valid schema for usecases mapped to mutation only 2`] = `
""""Superface.ai ❤️"""
schema {
  query: Query
  mutation: Mutation
}

"""Profile's safe use-cases"""
type Query {
  _superJson: SuperJson
}

type SuperJson {
  profiles: [ProfileInfo]
  providers: [String]
}

type ProfileInfo {
  name: String
  version: String
  providers: [String]
}

"""Profile's unsafe and idempotent use-cases"""
type Mutation {
  ScopeName: ScopeNameMutation
}

type ScopeNameMutation {
  UnsafeUsecase(provider: ScopeNameProviderInput): ScopeNameUnsafeUsecaseResult
}

"""
Wrapping type to handle many possible types returned as result by OneSDK
"""
type ScopeNameUnsafeUsecaseResult {
  result: Int
}

"""Provider configuration for OneSDK perform"""
input ScopeNameProviderInput {
  """Provider test configuration"""
  test: TestProviderConfig
}

input TestProviderConfig {
  active: Boolean
  parameters: TestProviderParameters
  security: TestProviderSecurity
}

"""Provider-specific parameters"""
input TestProviderParameters {
  """Parameter accepted by test"""
  param_no_default: String

  """Parameter accepted by test"""
  param_default: String
}

"""Provider-specific security"""
input TestProviderSecurity {
  """Security accepted by test"""
  api__key: TestApiKeySecurityValues

  """Security accepted by test"""
  basic: TestBasicSecurityValues

  """Security accepted by test"""
  bearer_token: TestBearerTokenSecurityValues

  """Security accepted by test"""
  digest: TestDigestSecurityValues
}

input TestApiKeySecurityValues {
  apikey: String
}

input TestBasicSecurityValues {
  username: String
  password: String
}

input TestBearerTokenSecurityValues {
  token: String
}

input TestDigestSecurityValues {
  username: String
  password: String
}"
`;
